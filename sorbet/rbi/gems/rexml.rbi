# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rexml/all/rexml.rbi
#
# rexml-3.2.4

module REXML
end
class REXML::ParseException < RuntimeError
  def context; end
  def continued_exception; end
  def continued_exception=(arg0); end
  def initialize(message, source = nil, parser = nil, exception = nil); end
  def line; end
  def parser; end
  def parser=(arg0); end
  def position; end
  def source; end
  def source=(arg0); end
  def to_s; end
end
class REXML::UndefinedNamespaceException < REXML::ParseException
  def initialize(prefix, source, parser); end
end
module REXML::Encoding
  def decode(string); end
  def encode(string); end
  def encoding; end
  def encoding=(encoding); end
  def find_encoding(name); end
end
class REXML::SourceFactory
  def self.create_from(arg); end
end
class REXML::Source
  def buffer; end
  def consume(pattern); end
  def current_line; end
  def detect_encoding; end
  def empty?; end
  def encoding; end
  def encoding=(enc); end
  def encoding_updated; end
  def initialize(arg, encoding = nil); end
  def line; end
  def match(pattern, cons = nil); end
  def match_to(char, pattern); end
  def match_to_consume(char, pattern); end
  def position; end
  def read; end
  def scan(pattern, cons = nil); end
  include REXML::Encoding
end
class REXML::IOSource < REXML::Source
  def consume(pattern); end
  def current_line; end
  def empty?; end
  def encoding_updated; end
  def initialize(arg, block_size = nil, encoding = nil); end
  def match(pattern, cons = nil); end
  def position; end
  def read; end
  def readline; end
  def scan(pattern, cons = nil); end
end
module REXML::Parsers
end
class REXML::Parsers::BaseParser
  def add_listener(listener); end
  def empty?; end
  def entity(reference, entities); end
  def has_next?; end
  def initialize(source); end
  def need_source_encoding_update?(xml_declaration_encoding); end
  def normalize(input, entities = nil, entity_filter = nil); end
  def parse_attributes(prefixes, curr_ns); end
  def peek(depth = nil); end
  def position; end
  def process_instruction; end
  def pull; end
  def pull_event; end
  def source; end
  def stream=(source); end
  def unnormalize(string, entities = nil, filter = nil); end
  def unshift(token); end
end
module REXML::XMLTokens
end
