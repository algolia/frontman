# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/slim/all/slim.rbi
#
# slim-4.1.0

module Slim
end
class Slim::Parser < Temple::Parser
  def call(str); end
  def deprecated_syntax(message); end
  def expect_next_line; end
  def get_indent(line); end
  def initialize(opts = nil); end
  def next_line; end
  def parse_attributes(attributes = nil); end
  def parse_broken_line; end
  def parse_comment_block; end
  def parse_line; end
  def parse_line_indicators; end
  def parse_quoted_attribute(quote); end
  def parse_ruby_code(outer_delimiter); end
  def parse_tag(tag); end
  def parse_text_block(first_line = nil, text_indent = nil); end
  def reset(lines = nil, stacks = nil); end
  def syntax_error!(message); end
  def unknown_line_indicator; end
end
class Slim::Parser::SyntaxError < StandardError
  def column; end
  def error; end
  def file; end
  def initialize(error, file, line, lineno, column); end
  def line; end
  def lineno; end
  def to_s; end
end
class Slim::Filter < Temple::HTML::Filter
  def on_slim_control(code, content); end
  def on_slim_embedded(type, content, attrs); end
  def on_slim_output(escape, code, content); end
  def on_slim_text(type, content); end
end
class Slim::DoInserter < Slim::Filter
  def on_slim_control(code, content); end
  def on_slim_output(escape, code, content); end
end
class Slim::EndInserter < Slim::Filter
  def append_end(result); end
  def control?(exp); end
  def on_multi(*exps); end
end
class Slim::TextCollector < Slim::Filter
  def call(exp); end
  def on_slim_interpolate(text); end
end
class Slim::NewlineCollector < Slim::Filter
  def call(exp); end
  def on_newline; end
end
class Slim::OutputProtector < Slim::Filter
  def call(exp); end
  def on_slim_output(escape, text, content); end
  def on_static(text); end
  def unprotect(text); end
end
class Slim::Embedded < Slim::Filter
  def enabled?(name); end
  def initialize(opts = nil); end
  def normalize_engine_list(list); end
  def on_slim_embedded(name, body, attrs); end
  def self.create(name, options); end
  def self.engines; end
  def self.register(name, klass, *option_filter); end
end
class Slim::Embedded::Engine < Slim::Filter
  def collect_newlines(body); end
  def collect_text(body); end
end
class Slim::Embedded::TiltEngine < Slim::Embedded::Engine
  def on_slim_embedded(engine, body, attrs); end
  def tilt_render(tilt_engine, tilt_options, text); end
end
class Slim::Embedded::SassEngine < Slim::Embedded::TiltEngine
  def tilt_render(tilt_engine, tilt_options, text); end
end
class Slim::Embedded::InterpolateTiltEngine < Slim::Embedded::TiltEngine
  def collect_text(body); end
  def interpolation; end
  def output_protector; end
  def tilt_render(tilt_engine, tilt_options, text); end
end
class Slim::Embedded::TagEngine < Slim::Embedded::Engine
  def on_slim_embedded(engine, body, attrs); end
end
class Slim::Embedded::JavaScriptEngine < Slim::Embedded::TagEngine
  def on_slim_embedded(engine, body, attrs); end
end
class Slim::Embedded::RubyEngine < Slim::Embedded::Engine
  def on_slim_embedded(engine, body, attrs); end
end
class Slim::Interpolation < Slim::Filter
  def on_slim_interpolate(string); end
end
class Slim::Controls < Slim::Filter
  def on_slim_control(code, content); end
  def on_slim_output(escape, code, content); end
  def on_slim_text(type, content); end
end
module Slim::Splat
end
class Slim::Splat::Filter < Slim::Filter
  def call(exp); end
  def make_builder(attrs); end
  def on_html_attrs(*attrs); end
  def on_html_tag(name, attrs, content = nil); end
  def splat?(attr); end
end
class Slim::InvalidAttributeNameError < StandardError
end
class Slim::Splat::Builder
  def attr(name, value); end
  def build_attrs; end
  def build_tag(&block); end
  def code_attr(name, escape, value); end
  def escape_html(escape, value); end
  def hyphen_attr(name, escape, value); end
  def initialize(options); end
  def splat_attrs(splat); end
end
class Slim::CodeAttributes < Slim::Filter
  def on_html_attr(name, value); end
  def on_html_attrs(*attrs); end
  def on_slim_attrvalue(escape, code); end
end
class Slim::Engine < Temple::Engine
end
class Slim::Template < Temple::Templates::Tilt
end
