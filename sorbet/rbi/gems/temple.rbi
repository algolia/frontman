# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/temple/all/temple.rbi
#
# temple-0.8.2

module Temple
end
module Temple::StaticAnalyzer
  def self.available?; end
  def self.static?(code); end
  def self.syntax_error?(code); end
end
class Temple::StaticAnalyzer::SyntaxChecker < Ripper
  def on_parse_error(*arg0); end
end
class Temple::StaticAnalyzer::SyntaxChecker::ParseError < StandardError
end
module Temple::Mixins
end
module Temple::ERB
end
module Temple::Generators
end
module Temple::Filters
end
module Temple::HTML
end
module Temple::Utils
  def empty_exp?(exp); end
  def escape_html(html); end
  def escape_html_safe(html); end
  def indent_dynamic(text, indent_next, indent, pre_tags = nil); end
  def unique_name(prefix = nil); end
  extend Temple::Utils
end
module Temple::Mixins::CoreDispatcher
  def on_capture(name, exp); end
  def on_multi(*exps); end
end
module Temple::Mixins::EscapeDispatcher
  def on_escape(flag, exp); end
end
module Temple::Mixins::ControlFlowDispatcher
  def on_block(code, content); end
  def on_case(arg, *cases); end
  def on_cond(*cases); end
  def on_if(condition, *cases); end
end
module Temple::Mixins::CompiledDispatcher
  def call(exp); end
  def compile(exp); end
  def dispatched_methods; end
  def dispatcher(exp); end
  def replace_dispatcher(exp); end
end
class Temple::Mixins::CompiledDispatcher::DispatchNode < Hash
  def compile(level = nil, call_parent = nil); end
  def initialize; end
  def method; end
  def method=(arg0); end
end
module Temple::Mixins::Dispatcher
  include Temple::Mixins::CompiledDispatcher
  include Temple::Mixins::ControlFlowDispatcher
  include Temple::Mixins::CoreDispatcher
  include Temple::Mixins::EscapeDispatcher
end
module Temple::Mixins::ClassOptions
  def default_options; end
  def define_deprecated_options(*opts); end
  def define_options(*opts); end
  def disable_option_validator!; end
  def options; end
  def set_default_options(opts); end
  def set_options(opts); end
end
module Temple::Mixins::ThreadOptions
  def thread_options; end
  def thread_options_key; end
  def with_options(options); end
end
module Temple::Mixins::Options
  def initialize(opts = nil); end
  def options; end
  def self.included(base); end
end
class Temple::Filter
  extend Temple::Mixins::ClassOptions
  extend Temple::Mixins::ThreadOptions
  include Temple::Mixins::Dispatcher
  include Temple::Mixins::Options
  include Temple::Utils
end
class Temple::ImmutableMap
  def [](key); end
  def each; end
  def include?(key); end
  def initialize(*map); end
  def keys; end
  def to_hash; end
  def values; end
  include Enumerable
end
class Temple::MutableMap < Temple::ImmutableMap
  def []=(key, value); end
  def initialize(*map); end
  def update(map); end
end
class Temple::OptionMap < Temple::MutableMap
  def []=(key, value); end
  def add_deprecated_keys(*keys); end
  def add_valid_keys(*keys); end
  def deprecated_key?(key); end
  def initialize(*map, &block); end
  def update(map); end
  def valid_key?(key); end
  def valid_keys; end
  def validate_key!(key); end
  def validate_map!(map); end
end
module Temple::Mixins::EngineDSL
  def after(name, *args, &block); end
  def append(*args, &block); end
  def before(name, *args, &block); end
  def chain_class_constructor(filter, local_options); end
  def chain_element(args, block); end
  def chain_modified!; end
  def chain_name(name); end
  def chain_proc_constructor(name, filter); end
  def filter(name, *options); end
  def generator(name, *options); end
  def html(name, *options); end
  def prepend(*args, &block); end
  def remove(name); end
  def replace(name, *args, &block); end
  def use(*args, &block); end
end
class Temple::Engine
  def call(input); end
  def call_chain; end
  def chain; end
  def chain_modified!; end
  def initialize(opts = nil); end
  def self.chain; end
  extend Temple::Mixins::ClassOptions
  extend Temple::Mixins::EngineDSL
  extend Temple::Mixins::ThreadOptions
  include Temple::Mixins::EngineDSL
  include Temple::Mixins::Options
end
class Temple::Filters::ControlFlow < Temple::Filter
  def on_block(code, exp); end
  def on_case(arg, *cases); end
  def on_cond(*cases); end
  def on_if(condition, yes, no = nil); end
end
class Temple::Filters::MultiFlattener < Temple::Filter
  def on_multi(*exps); end
end
class Temple::Filters::StaticMerger < Temple::Filter
  def on_multi(*exps); end
end
class Temple::Parser
  extend Temple::Mixins::ClassOptions
  extend Temple::Mixins::ThreadOptions
  include Temple::Mixins::Options
  include Temple::Utils
end
module Temple::HTML::Dispatcher
  def on_html_attr(name, content); end
  def on_html_attrs(*attrs); end
  def on_html_comment(content); end
  def on_html_condcomment(condition, content); end
  def on_html_js(content); end
  def on_html_tag(name, attrs, content = nil); end
end
class Temple::HTML::Filter < Temple::Filter
  def contains_nonempty_static?(exp); end
  include Temple::HTML::Dispatcher
end
class Temple::Generator
  def buffer; end
  def call(exp); end
  def capture_generator; end
  def concat(str); end
  def create_buffer; end
  def on(*exp); end
  def on_capture(name, exp); end
  def on_code(code); end
  def on_dynamic(code); end
  def on_multi(*exp); end
  def on_newline; end
  def on_static(text); end
  def postamble; end
  def preamble; end
  def restore_buffer; end
  def return_buffer; end
  def save_buffer; end
  extend Temple::Mixins::ClassOptions
  extend Temple::Mixins::ThreadOptions
  include Temple::Mixins::CompiledDispatcher
  include Temple::Mixins::Options
  include Temple::Utils
end
class Temple::Generators::Array < Temple::Generator
  def create_buffer; end
  def return_buffer; end
end
class Temple::Generators::ArrayBuffer < Temple::Generators::Array
  def call(exp); end
  def return_buffer; end
end
class Temple::Generators::StringBuffer < Temple::Generators::ArrayBuffer
  def create_buffer; end
  def on_dynamic(code); end
  def return_buffer; end
end
class Temple::Filters::Encoding < Temple::Parser
  def call(s); end
end
class Temple::Filters::RemoveBOM < Temple::Parser
  def call(s); end
end
class Temple::HTML::AttributeSorter < Temple::HTML::Filter
  def call(exp); end
  def on_html_attrs(*attrs); end
end
class Temple::HTML::AttributeMerger < Temple::HTML::Filter
  def on_html_attrs(*attrs); end
end
class Temple::HTML::Fast < Temple::HTML::Filter
  def initialize(opts = nil); end
  def on_html_attr(name, value); end
  def on_html_attrs(*attrs); end
  def on_html_comment(content); end
  def on_html_condcomment(condition, content); end
  def on_html_doctype(type); end
  def on_html_js(content); end
  def on_html_tag(name, attrs, content = nil); end
end
class Temple::HTML::Pretty < Temple::HTML::Fast
  def call(exp); end
  def indent; end
  def initialize(opts = nil); end
  def on_dynamic(code); end
  def on_html_comment(content); end
  def on_html_doctype(type); end
  def on_html_tag(name, attrs, content = nil); end
  def on_static(content); end
  def preamble; end
  def tag_indent(name); end
end
class Temple::Filters::Escapable < Temple::Filter
  def initialize(opts = nil); end
  def on_dynamic(value); end
  def on_escape(flag, exp); end
  def on_static(value); end
end
module Temple::Templates
  def self.method_missing(name, engine, options = nil); end
end
module Temple::Mixins::Template
  def compile(code, options); end
  def create(engine, options); end
  def register_as(*names); end
  include Temple::Mixins::ClassOptions
end
class Temple::Templates::Tilt < Tilt::Template
  def precompiled_template(locals = nil); end
  def prepare; end
  def self.default_mime_type; end
  def self.default_mime_type=(mime_type); end
  def self.register_as(*names); end
  extend Temple::Mixins::Template
end
